/* when have a group of properties to use together create a mixin */
/* common to have mixins in a separate file */
@mixin alert-text {
  // alert-text has meaning
  color: #ae2f2f;
  font-size: 14px;
  font-variant: small-caps;
}

.input-error {
  @include alert-text; // can apply this semantic mixin alert-text to a more specific name input-error
  margin-bottom: 10px;
}

/* a mixin with variables */
@mixin notice-box($background, $width) {
  background: $background;
  border: 1px solid darken($background, 20%);
  width: $width;
}

.warning {
  @include notice-box(red, 100%);
}

.welcome {
  /* named variables so order can be switched */
  @include notice-box($width: 300px, $background: green);
}

/* mixin arguments can have defaults if null then property is left off */
@mixin dropdown($background: #333, $width: 200px, $opacity: null) {
  background: $background;
  opacity: $opacity;
  padding: 10px 20px;
  width: $width;
}

.header-menu {
  @include dropdown($width: 300px);
}

/* compiles to */
.header-menu {
  background: #333;
  padding: 10px 20px;
  width: 300px;
}

/* box-shadows and liner-gradients can take multiple so $variable... */
@mixin rainbow($colors...) {
  background: linear-gradient($colors);
}

.warm-rainbow {
  @include rainbow(red, orange, yellow);
}

/* compiles to */
.warm-rainbow {
  background: linear-gradient(red, orange, yellow);
}

.full-rainbow {
  @include rainbow(red, orange, yellow, green, blue, purple);
}

/* complies to */
.full-rainbow {
  background: linear-gradient(red, orange, yellow, green, blue, purple);
}

@mixin button($background, $shadow: null) {
  background: $background;
  @if $shadow == null {
    border: 2px solid darken($background, 20%);
  } @else {
    box-shadow: $shadow;
  }
}

.flat-button {
  @include button(green);
}

.floating-button {
  @include button(red, 1px 0px 0px #999);
}

/* compiles to */
.flat-button {
  background: green;
  border: 2px solid #001a00;
}

.floating-button {
  background: red;
  box-shadow: 1px 0px 0px #999;
}
